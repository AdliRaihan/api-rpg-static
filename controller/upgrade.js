const Util = require('../common/Util')
const AppBase = require('../common/Base')
const UpgradeModel = require('./model/upgradeModel')
const hardData = require('../common/HardData/HardItems')
class UpgradeController extends AppBase {
    #baseModel;
    constructor(req, res) {
        super(req, res)
        this.#baseModel = new UpgradeModel()
        switch (req.method) {
            //  only allowing POST method for this endpoint!
            // if method is not POST then makeResponse with status "failed" and code 500
            case 'POST':
                this.#baseModel.request = req.query
                this.upgradeLogic()
                break
            default:
                super.makeResponse("failed", 500, "METHOD NOT ALLOWED!")
                break
        }
    }
    upgradeLogic() {
        /*
            Filtering object by itemId
            here if itemId is not found in hardData.items
            then makeResponse with status "failed" and code 500
            and message "ITEM NOT FOUND!"
        */
        var item = hardData.items.filter(
            item =>
                item.itemId === Number(this.#baseModel.request.itemId)
        )

        /*
            current upgraded is pretty much improtant to determine if the item is eligible for upgrade
            and also the upgrade **IS** not from Backends but from Frontends
            we do not store anydata to database!
        */
        const upgradedNumber = Number(this.#baseModel.request.currentUpgraded)

        /*
            checking if upgradedNumber is known as integer if not then 
            it'll thrown as not number or unknown 
            so frontend can pass the correct parameter LOL
        */
        if (!upgradedNumber) 
            super.makeResponse("Failed", 500, "Current upgraded is unknown or its not number value!")
        /*
            Checking if filtered item is available or not
            if not then will shown as item not found with code 500
        */
        else if (item.length === 0) 
            super.makeResponse("Failed", 500, "Item not found!")
        /*
            if all condition passed then go to upgrade section
        */
        else {
            /*
                Getting rng number to determine if the item will be upgraded or not
                rng number is generated by native js using math.random() 
                and formula using your current upgraded / 1
            */
            const didUpgraded = Util.RNGItemUpgrade(upgradedNumber)
            
            /*
               If upgrade fails will downgraded to previous upgrade number
               condition for this is if current upgrade number is greater than 5
            */
            const costUpgrade = (didUpgraded == true) ? 1 : (upgradedNumber > 5) ? -1 : 0

            /*
                Here all logic will be bind to response object ,
                there are 2 object {itemDetails} and {itemUpgraded}
                itemDetails is current information about items user about to upgrade
                itemUpgraded is current infromation about items after upgrade
            */
            this.#baseModel.response.itemUpgradeSuccess = didUpgraded

            /*
                Here we are getting the current time stamp
                tiemstamp is for determining when the user doing an upgrade
                if data didnt match with frontends just call it cheating
            */
            this.#baseModel.response.itemUpgradedTimeStamp = Math.floor(Date.now() / 1000)

            this.#baseModel.response.itemDetails = {
                itemName: item[0].itemName,
                itemClass: Object.keys(hardData.jobClassType).filter(key => hardData.jobClassType[key] === item[0].classType)[0],
                itemUpgraded: upgradedNumber
            }
            this.#baseModel.response.itemUpgraded = {
                itemName: item[0].itemName,
                itemClass: Object.keys(hardData.jobClassType).filter(key => hardData.jobClassType[key] === item[0].classType)[0],
                itemUpgraded: upgradedNumber + costUpgrade
            }
            super.makeResponse("success", 200, "", this.#baseModel.response)
        }
    }
}
module.exports = UpgradeController;